/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockNft, MockNftInterface } from "../MockNft";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040805180820182526007815266135bd8dad3999d60ca1b6020808301918252835180850190945260048452631b53919560e21b9084015281519192916200005d916000916200007c565b508051620000739060019060208401906200007c565b5050506200015f565b8280546200008a9062000122565b90600052602060002090601f016020900481019282620000ae5760008555620000f9565b82601f10620000c957805160ff1916838001178555620000f9565b82800160010185558215620000f9579182015b82811115620000f9578251825591602001919060010190620000dc565b50620001079291506200010b565b5090565b5b808211156200010757600081556001016200010c565b600181811c908216806200013757607f821691505b602082108114156200015957634e487b7160e01b600052602260045260246000fd5b50919050565b6113c6806200016f6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101e1578063b88d4fde146101f4578063c87b56dd14610207578063e985e9c51461021a57600080fd5b80636352211e146101a557806370a08231146101b857806395d89b41146101d957600080fd5b8063095ea7b3116100c8578063095ea7b31461015757806323b872dd1461016c57806340c10f191461017f57806342842e0e1461019257600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd366004610ed6565b610256565b60405190151581526020015b60405180910390f35b61011f6102a8565b60405161010e9190610f4b565b61013f61013a366004610f5e565b61033a565b6040516001600160a01b03909116815260200161010e565b61016a610165366004610f93565b6103d4565b005b61016a61017a366004610fbd565b6104ea565b61016a61018d366004610f93565b61051b565b61016a6101a0366004610fbd565b610529565b61013f6101b3366004610f5e565b610544565b6101cb6101c6366004610ff9565b6105bb565b60405190815260200161010e565b61011f610642565b61016a6101ef366004611014565b610651565b61016a610202366004611066565b61065c565b61011f610215366004610f5e565b610694565b610102610228366004611142565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061028757506001600160e01b03198216635b5e139f60e01b145b806102a257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102b790611175565b80601f01602080910402602001604051908101604052809291908181526020018280546102e390611175565b80156103305780601f1061030557610100808354040283529160200191610330565b820191906000526020600020905b81548152906001019060200180831161031357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166103b85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006103df82610544565b9050806001600160a01b0316836001600160a01b0316141561044d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016103af565b336001600160a01b038216148061046957506104698133610228565b6104db5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016103af565b6104e5838361077c565b505050565b6104f433826107ea565b6105105760405162461bcd60e51b81526004016103af906111b0565b6104e58383836108e1565b6105258282610a7d565b5050565b6104e58383836040518060200160405280600081525061065c565b6000818152600260205260408120546001600160a01b0316806102a25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016103af565b60006001600160a01b0382166106265760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016103af565b506001600160a01b031660009081526003602052604090205490565b6060600180546102b790611175565b610525338383610bbf565b61066633836107ea565b6106825760405162461bcd60e51b81526004016103af906111b0565b61068e84848484610c8e565b50505050565b6000818152600260205260409020546060906001600160a01b03166107135760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016103af565b600061072a60408051602081019091526000815290565b9050600081511161074a5760405180602001604052806000815250610775565b8061075484610cc1565b604051602001610765929190611201565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906107b182610544565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166108635760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016103af565b600061086e83610544565b9050806001600160a01b0316846001600160a01b031614806108a95750836001600160a01b031661089e8461033a565b6001600160a01b0316145b806108d957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166108f482610544565b6001600160a01b0316146109585760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016103af565b6001600160a01b0382166109ba5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103af565b6109c560008261077c565b6001600160a01b03831660009081526003602052604081208054600192906109ee908490611246565b90915550506001600160a01b0382166000908152600360205260408120805460019290610a1c90849061125d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610ad35760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016103af565b6000818152600260205260409020546001600160a01b031615610b385760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103af565b6001600160a01b0382166000908152600360205260408120805460019290610b6190849061125d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b03161415610c215760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103af565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610c998484846108e1565b610ca584848484610dbf565b61068e5760405162461bcd60e51b81526004016103af90611275565b606081610ce55750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610d0f5780610cf9816112c7565b9150610d089050600a836112f8565b9150610ce9565b60008167ffffffffffffffff811115610d2a57610d2a611050565b6040519080825280601f01601f191660200182016040528015610d54576020820181803683370190505b5090505b84156108d957610d69600183611246565b9150610d76600a8661130c565b610d8190603061125d565b60f81b818381518110610d9657610d96611320565b60200101906001600160f81b031916908160001a905350610db8600a866112f8565b9450610d58565b60006001600160a01b0384163b15610eb257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610e03903390899088908890600401611336565b6020604051808303816000875af1925050508015610e3e575060408051601f3d908101601f19168201909252610e3b91810190611373565b60015b610e98573d808015610e6c576040519150601f19603f3d011682016040523d82523d6000602084013e610e71565b606091505b508051610e905760405162461bcd60e51b81526004016103af90611275565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506108d9565b506001949350505050565b6001600160e01b031981168114610ed357600080fd5b50565b600060208284031215610ee857600080fd5b813561077581610ebd565b60005b83811015610f0e578181015183820152602001610ef6565b8381111561068e5750506000910152565b60008151808452610f37816020860160208601610ef3565b601f01601f19169290920160200192915050565b6020815260006107756020830184610f1f565b600060208284031215610f7057600080fd5b5035919050565b80356001600160a01b0381168114610f8e57600080fd5b919050565b60008060408385031215610fa657600080fd5b610faf83610f77565b946020939093013593505050565b600080600060608486031215610fd257600080fd5b610fdb84610f77565b9250610fe960208501610f77565b9150604084013590509250925092565b60006020828403121561100b57600080fd5b61077582610f77565b6000806040838503121561102757600080fd5b61103083610f77565b91506020830135801515811461104557600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561107c57600080fd5b61108585610f77565b935061109360208601610f77565b925060408501359150606085013567ffffffffffffffff808211156110b757600080fd5b818701915087601f8301126110cb57600080fd5b8135818111156110dd576110dd611050565b604051601f8201601f19908116603f0116810190838211818310171561110557611105611050565b816040528281528a602084870101111561111e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561115557600080fd5b61115e83610f77565b915061116c60208401610f77565b90509250929050565b600181811c9082168061118957607f821691505b602082108114156111aa57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008351611213818460208801610ef3565b835190830190611227818360208801610ef3565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561125857611258611230565b500390565b6000821982111561127057611270611230565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006000198214156112db576112db611230565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611307576113076112e2565b500490565b60008261131b5761131b6112e2565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061136990830184610f1f565b9695505050505050565b60006020828403121561138557600080fd5b815161077581610ebd56fea26469706673582212207d505e8a3e93bb026777f8867e352ad824e65feecb72cd56c973aabd5eea6b2f64736f6c634300080a0033";

type MockNftConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockNftConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockNft__factory extends ContractFactory {
  constructor(...args: MockNftConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockNft> {
    return super.deploy(overrides || {}) as Promise<MockNft>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockNft {
    return super.attach(address) as MockNft;
  }
  connect(signer: Signer): MockNft__factory {
    return super.connect(signer) as MockNft__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockNftInterface {
    return new utils.Interface(_abi) as MockNftInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockNft {
    return new Contract(address, _abi, signerOrProvider) as MockNft;
  }
}
